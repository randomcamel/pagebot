#!/usr/bin/env ruby

require 'logger'

require 'yaml'
require 'slack/post'
require 'summer'
require 'pry'

require_relative 'config/bot_config'
require_relative 'monkeypatch'

class Bot < Summer::Connection

  def initialize(irc_server, overrides={})
    bot_config.merge!(overrides)

    Slack::Post.configure(
        webhook_url: bot_config[:slack_url],
        username:    bot_config[:bot_name] || 'pagebot',
        icon_emoji:  ':windows:',
    )

    @mention_count = 0
    @latest_period_start = Time.now - bot_config[:rate_limit_period_sec]
    @log = Logger.new STDOUT

    @log.info "Config: #{bot_config}"

    write_summer_config

    # this looks weird, but Summer doesn't read the config file until we call the superclass constructor.
    super(irc_server)
  end

  def bot_config
    @bot_config ||= {
      slack_url: SLACK_URL,
      slack_room: SLACK_ROOM,
      bot_name: BOT_NAME,
      regex: REGEX,
      nick: NICK,
      nickserv_password: NICKSERV_PASSWORD,
      ignore_nicks: IGNORE_NICKS,
      channels: CHANNELS,
      irc_server: IRC_SERVER,
      rate_limit_period_sec: RATE_LIMIT_PERIOD_SEC,
      mentions_per_limit_period: MENTIONS_PER_LIMIT_PERIOD,
    }
  end

  def write_summer_config
    Dir.mkdir "config" rescue nil
    config_text = {
        nick: bot_config[:nick],
        channels: bot_config[:channels],
        nickserv_password: bot_config[:nickserv_password],
      }.to_yaml

    File.open("config/summer.yml", "w") do |f|
      f.puts config_text
    end
    @log.info "Wrote Summer config to config/summer.yml"
  end

  def within_rate_limit?
    !(@mention_count >= bot_config[:mentions_per_limit_period] &&
      (Time.now - @latest_period_start) <= bot_config[:rate_limit_period_sec])
  end

  def count_notification!
    # if we're outside the limit period, reset the period and the count.
    if (Time.now - @latest_period_start) > bot_config[:rate_limit_period_sec]
      @latest_period_start = Time.now
      @mention_count = 1
    # otherwise just increment the count.
    else
      @mention_count += 1
    end
  end

  def ignore?(sender)
    bot_config[:ignore_nicks].include?(sender)
  end

  def notify_slack!(sender, channel, message)
    msg = <<-EOS
<#{sender[:nick]}> #{message}
EOS
    if within_rate_limit?
      @log.info "Notifying Slack room '#{bot_config[:slack_room]}'"

      att = [
        {
          color: "yellow",
          pretext: channel,
          fallback_text: msg,
          text: msg,
          author_name: channel,
        }
      ]
      Slack::Post.post_with_attachments(nil, att, bot_config[:slack_room])

      count_notification!
    end
  end

  def channel_message(sender, channel, message)
    if message =~ bot_config[:regex]
      if ignore?(sender[:nick])
        @log.info "ignoring nick '#{sender}' due to match with #{bot_config[:ignore_nicks]}"
      else
        notify_slack!(sender, channel, message)
        @log.info "period start: #{@latest_period_start} ; count: #{@mention_count}"
      end
    else
      @log.info ""
    end
  end
end

Dir.chdir(File.dirname(File.expand_path(__FILE__)))

if ARGV.size == 0
  Bot.new(IRC_SERVER)
elsif ARGV[0] == "-d"
  Bot.new("localhost", slack_room: '@cdoherty')
end
