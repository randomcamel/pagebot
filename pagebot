#!/usr/bin/env ruby

require 'logger'

require 'hipchat'
require 'yaml'
require 'summer'

require_relative 'config/bot_config'
require_relative 'monkeypatch'

class Bot < Summer::Connection

  def initialize(*args)
    @hipchat = HipChat::Client.new(HIPCHAT_API_KEY, :api_version => 'v2')
    @mention_count = 0
    @latest_period_start = Time.now - RATE_LIMIT_PERIOD_SEC
    @log = Logger.new STDOUT

    @log.info "Config: #{config}"

    write_summer_config

    # this looks weird, but Summer doesn't read the config file until we call the superclass constructor.
    super(*args)
  end

  def config
    {
      hipchat_key: HIPCHAT_API_KEY,
      hipchat_room: HIPCHAT_ROOM,
      regex: REGEX,
      nick: NICK,
      nickserv_password: NICKSERV_PASSWORD,
      channels: CHANNELS,
      irc_server: IRC_SERVER,
      rate_limit_period_sec: RATE_LIMIT_PERIOD_SEC,
      mentions_per_limit_period: MENTIONS_PER_LIMIT_PERIOD,
    }
  end

  def write_summer_config
    Dir.mkdir "config" rescue nil
    config_text = {
        nick: NICK,
        channels: CHANNELS,
        nickserv_password: NICKSERV_PASSWORD
      }.to_yaml

    File.open("config/summer.yml", "w") do |f|
      f.puts config_text
    end
    @log.info "Wrote Summer config to config/summer.yml"
  end

  def within_rate_limit?
    !(@mention_count >= MENTIONS_PER_LIMIT_PERIOD &&
      (Time.now - @latest_period_start) <= RATE_LIMIT_PERIOD_SEC)
  end

  def count_notification!
    # if we're outside the limit period, reset the period and the count.
    if (Time.now - @latest_period_start) > RATE_LIMIT_PERIOD_SEC
      @latest_period_start = Time.now
      @mention_count = 1
    # otherwise just increment the count.
    else
      @mention_count += 1
    end
  end

  def notify_hipchat!(sender, channel, message)
    msg = <<-EOS
#{Time.now.strftime('%H:%M')} #{channel}: <#{sender[:nick]}> #{message}
EOS
    if within_rate_limit?
      @hipchat[HIPCHAT_ROOM].send("Pagebot", msg, :color => "yellow", :message_format => "text")
      count_notification!
      @log.info "Notified HipChat room '#{HIPCHAT_ROOM}'"
    end
  end

  def channel_message(sender, channel, message)
    if message =~ REGEX
      notify_hipchat!(sender, channel, message)
      @log.info "period start: #{@latest_period_start} ; count: #{@mention_count}"
    end
  end
end

Dir.chdir(File.dirname(File.expand_path(__FILE__)))

if ARGV.size == 0
  Bot.new(IRC_SERVER)
elsif ARGV[0] == "-d"
  Bot::HIPCHAT_ROOM = "Bots Only"
  Bot.new("localhost")
else
  @c = HipChat::Client.new(HIPCHAT_API_KEY, :api_version => 'v2')
end
